{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"17441e59-86fd-5fcb-85bc-1c1243c2b5f7","excerpt":"Unity 설치 에러 유니티 설치 중 Microsoft Visual Studio Community 2019 설치 실패 유니티 설치를 하는 도중 모듈 설치에서 Microsoft Visual Studio Community 2019 설치를 실패했다. 시도한 방법1 -> 실패 컴퓨터를 다시시작해서 다시 Microsoft Visual Studio Community 2019 모듈을 설치했지만 똑같이 설치 했다. 시도한 방법2 -> 성공 Visual Studio Installer를 열어서 확인해 보니 설치를 완료하기 위해선 다시시작해야한다는 버튼이 있었다. 을 눌러서 다시시작했다. 다시시작한 후 Unity의 모듈을 확인해보니 Microsoft Visual Studio Community 2019 모듈이 설치되어있었다. Unity 설치 에러 시도한 방법1 -> 실패 시도한 방법2 -> 성공","fields":{"slug":"/unity-install/"},"frontmatter":{"categories":"Unity Error","title":"Unity 설치 에러","date":"February 06, 2022"}},"next":{"fields":{"slug":"/greedy-algorithm/"}},"previous":null},{"node":{"id":"2dcb61b2-cbeb-5467-9719-0cfb4babb7ba","excerpt":"1. 그리디(Greedy) 알고리즘 현재 상황에서 지금 당장 좋은 것만 고르는 방법  위의 그림과 같이 그리디 알고리즘은 를 찾을 수 없을 가능성이 많다. 따라서 그리디 알고리즘은 사전에 외우고 있지 않아도 풀 수 있지만 그리디 외 다른 알고리즘으로 풀어야 더 효율적인 문제들도 많으니 어떤 문제에서 그리디를 사용할지 정확히 알아야한다. 최적 해가 되는 조건 탐욕 선택 속성: 이전 단계의 선택이 다음 단계의 선택과 완전히 무관 최적 부분 구조: 문제의 최적 해가 부분 문제 최적 해의 모임으로 구성 문제에서 , 와 같은 기준이 있으면 그리디를 생각해봐야한다. 예를 들어 거스름돈 문제 가 있다. 🤑 거스름돈 문제 <거스름돈을 거슬러줄 때, 거슬러 줄 동전의 최소 개수를 구하는 것.> 풀이 방법은  부터 최대한 많이 거슬러주는 것이다. 따라서 화폐의 종류가 K개라고 하면 화폐의 종류만큼 반복해야하므로 시간 복잡도는 O(K) 이다. 앞에서 그리디 알고리즘을 설명한 것과 같이 그리디 알고리즘…","fields":{"slug":"/greedy-algorithm/"},"frontmatter":{"categories":"알고리즘 이론","title":"그리디 알고리즘 이론","date":"January 24, 2022"}},"next":null,"previous":{"fields":{"slug":"/unity-install/"}}}],"categories":["All","Unity","Error","알고리즘","이론"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}